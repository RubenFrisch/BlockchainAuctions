{
	"id": "5c9526a2077b80b5d9f2bde4ee48f8f1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"CircuitBreakerEmergencyController.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title Emergency circuit breaker controller contract\r\n/// @author Ruben Frisch (Óbuda University - John von Neumann Faculty of Informatics, Business Informatics MSc)\r\n/// @notice This contract enables the emergency pause feature\r\n/// @dev This contract enables the emergency pause feature\r\nabstract contract CircuitBreakerEmergencyController {\r\n\r\n     // <<< STATE VARIABLES >>>\r\n    /// @dev Indicates whether the auction system's emergency pause is enabled (true) or not (false)\r\n    bool private _paused;\r\n\r\n     // <<< EVENTS >>>\r\n    /// @dev Event for logging when the emergency pause feature has been toggled on\r\n    /// @notice Event for logging when the emergency pause feature has been toggled on\r\n    event EmergencyPauseTurnedOn();\r\n\r\n    /// @dev Event for logging when the emergency pause feature has been toggled off\r\n    /// @notice Event for logging when the emergency pause feature has been toggled off\r\n    event EmergencyPauseTurnedOff();\r\n\r\n     // <<< MODIFIERS >>>\r\n    /// @dev This modifier absorbs the associated function's body when the system is not paused, otherwise it reverts execution\r\n    modifier onlyWhenNotPaused {\r\n        require(!isPaused(), \"Paused!\");\r\n        _;\r\n    }\r\n\r\n    /// @dev This modifier absorbs the associated function's body when the system is paused, otherwise it reverts execution\r\n    modifier onlyWhenPaused {\r\n        require(isPaused(), \"Not paused!\");\r\n        _;\r\n    }\r\n\r\n     // <<< READ FUNCTIONS >>>\r\n    /// @dev Retrieves whether the system is currently paused (true) or not paused (false)\r\n    /// @notice Retrieves whether the system is currently paused (true) or not paused (false)\r\n    /// @return Returns a boolean flag indicating whether the system is paused (true) or not paused (false)\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n     // <<< CORE EMERGENCY PAUSE CONTROLLER FUNCTIONS >>>\r\n    /// @dev Turns emergency pause on\r\n    /// @notice Turns emergency pause on\r\n    /// @custom:requirement-modifier This function will only execute if the emergency pause is disabled\r\n    function _turnEmergencyPauseOn() internal onlyWhenNotPaused {\r\n         _paused = true;\r\n        emit EmergencyPauseTurnedOn();\r\n    }\r\n\r\n    /// @dev Turns emergency pause on\r\n    /// @notice Turns emergency pause on\r\n    /// @return Returns true boolean if the emergency pause has been enabled successfully\r\n    /// @custom:virtual This function should be overriden in the child contract, with access control, execution preconditions, and other checks implemented\r\n    /// @custom:virtual The storage modification should be executed by the internal function '_turnEmergencyPauseOn'\r\n    function turnEmergencyPauseOn() external virtual returns (bool);\r\n\r\n    /// @dev Turns emergency pause off\r\n    /// @notice Turns emergency pause off\r\n    /// @custom:requirement-modifier This function will only execute if the emergency pause is enabled\r\n    function _turnEmergencyPauseOff() internal onlyWhenPaused {\r\n        _paused = false;\r\n        emit EmergencyPauseTurnedOff();\r\n    }\r\n\r\n    /// @dev Turns emergency pause off\r\n    /// @notice Turns emergency pause off\r\n    /// @return Returns true boolean if the emergency pause has been disabled successfully\r\n    /// @custom:virtual This function should be overriden in the child contract, with access control, execution preconditions, and other checks implemented\r\n    /// @custom:virtual The storage modification should be executed by the internal function '_turnEmergencyPauseOff'\r\n    function turnEmergencyPauseOff() external virtual returns (bool);\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"CircuitBreakerEmergencyController.sol": {
				"CircuitBreakerEmergencyController": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EmergencyPauseTurnedOff",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EmergencyPauseTurnedOn",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "isPaused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "turnEmergencyPauseOff",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "turnEmergencyPauseOn",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Ruben Frisch (Óbuda University - John von Neumann Faculty of Informatics, Business Informatics MSc)",
						"details": "This contract enables the emergency pause feature",
						"events": {
							"EmergencyPauseTurnedOff()": {
								"details": "Event for logging when the emergency pause feature has been toggled off"
							},
							"EmergencyPauseTurnedOn()": {
								"details": "Event for logging when the emergency pause feature has been toggled on"
							}
						},
						"kind": "dev",
						"methods": {
							"isPaused()": {
								"details": "Retrieves whether the system is currently paused (true) or not paused (false)",
								"returns": {
									"_0": "Returns a boolean flag indicating whether the system is paused (true) or not paused (false)"
								}
							},
							"turnEmergencyPauseOff()": {
								"custom:virtual": "This function should be overriden in the child contract, with access control, execution preconditions, and other checks implementedThe storage modification should be executed by the internal function '_turnEmergencyPauseOff'",
								"details": "Turns emergency pause off",
								"returns": {
									"_0": "Returns true boolean if the emergency pause has been disabled successfully"
								}
							},
							"turnEmergencyPauseOn()": {
								"custom:virtual": "This function should be overriden in the child contract, with access control, execution preconditions, and other checks implementedThe storage modification should be executed by the internal function '_turnEmergencyPauseOn'",
								"details": "Turns emergency pause on",
								"returns": {
									"_0": "Returns true boolean if the emergency pause has been enabled successfully"
								}
							}
						},
						"stateVariables": {
							"_paused": {
								"details": "Indicates whether the auction system's emergency pause is enabled (true) or not (false)"
							}
						},
						"title": "Emergency circuit breaker controller contract",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isPaused()": "b187bd26",
							"turnEmergencyPauseOff()": "c3500639",
							"turnEmergencyPauseOn()": "a60ac480"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyPauseTurnedOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyPauseTurnedOn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnEmergencyPauseOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnEmergencyPauseOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ruben Frisch (\\u00d3buda University - John von Neumann Faculty of Informatics, Business Informatics MSc)\",\"details\":\"This contract enables the emergency pause feature\",\"events\":{\"EmergencyPauseTurnedOff()\":{\"details\":\"Event for logging when the emergency pause feature has been toggled off\"},\"EmergencyPauseTurnedOn()\":{\"details\":\"Event for logging when the emergency pause feature has been toggled on\"}},\"kind\":\"dev\",\"methods\":{\"isPaused()\":{\"details\":\"Retrieves whether the system is currently paused (true) or not paused (false)\",\"returns\":{\"_0\":\"Returns a boolean flag indicating whether the system is paused (true) or not paused (false)\"}},\"turnEmergencyPauseOff()\":{\"custom:virtual\":\"This function should be overriden in the child contract, with access control, execution preconditions, and other checks implementedThe storage modification should be executed by the internal function '_turnEmergencyPauseOff'\",\"details\":\"Turns emergency pause off\",\"returns\":{\"_0\":\"Returns true boolean if the emergency pause has been disabled successfully\"}},\"turnEmergencyPauseOn()\":{\"custom:virtual\":\"This function should be overriden in the child contract, with access control, execution preconditions, and other checks implementedThe storage modification should be executed by the internal function '_turnEmergencyPauseOn'\",\"details\":\"Turns emergency pause on\",\"returns\":{\"_0\":\"Returns true boolean if the emergency pause has been enabled successfully\"}}},\"stateVariables\":{\"_paused\":{\"details\":\"Indicates whether the auction system's emergency pause is enabled (true) or not (false)\"}},\"title\":\"Emergency circuit breaker controller contract\",\"version\":1},\"userdoc\":{\"events\":{\"EmergencyPauseTurnedOff()\":{\"notice\":\"Event for logging when the emergency pause feature has been toggled off\"},\"EmergencyPauseTurnedOn()\":{\"notice\":\"Event for logging when the emergency pause feature has been toggled on\"}},\"kind\":\"user\",\"methods\":{\"isPaused()\":{\"notice\":\"Retrieves whether the system is currently paused (true) or not paused (false)\"},\"turnEmergencyPauseOff()\":{\"notice\":\"Turns emergency pause off\"},\"turnEmergencyPauseOn()\":{\"notice\":\"Turns emergency pause on\"}},\"notice\":\"This contract enables the emergency pause feature\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"CircuitBreakerEmergencyController.sol\":\"CircuitBreakerEmergencyController\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"CircuitBreakerEmergencyController.sol\":{\"keccak256\":\"0x1642bffbe96b2754ef5e60cbaee2e155bdded5007aa5db67c4651da432c0ba23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9786edaecfd2666348247396b44bbac2482eb87a4d7cf813b4bef380d8492590\",\"dweb:/ipfs/QmWiPWTxium3BSbyD8h9MdMK9mgVEpeWHGcZJPzx88DukC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 5,
								"contract": "CircuitBreakerEmergencyController.sol:CircuitBreakerEmergencyController",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"events": {
							"EmergencyPauseTurnedOff()": {
								"notice": "Event for logging when the emergency pause feature has been toggled off"
							},
							"EmergencyPauseTurnedOn()": {
								"notice": "Event for logging when the emergency pause feature has been toggled on"
							}
						},
						"kind": "user",
						"methods": {
							"isPaused()": {
								"notice": "Retrieves whether the system is currently paused (true) or not paused (false)"
							},
							"turnEmergencyPauseOff()": {
								"notice": "Turns emergency pause off"
							},
							"turnEmergencyPauseOn()": {
								"notice": "Turns emergency pause on"
							}
						},
						"notice": "This contract enables the emergency pause feature",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"CircuitBreakerEmergencyController.sol": {
				"ast": {
					"absolutePath": "CircuitBreakerEmergencyController.sol",
					"exportedSymbols": {
						"CircuitBreakerEmergencyController": [
							84
						]
					},
					"id": 85,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "CircuitBreakerEmergencyController",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "61:295:0",
								"text": "@title Emergency circuit breaker controller contract\n @author Ruben Frisch (Óbuda University - John von Neumann Faculty of Informatics, Business Informatics MSc)\n @notice This contract enables the emergency pause feature\n @dev This contract enables the emergency pause feature"
							},
							"fullyImplemented": false,
							"id": 84,
							"linearizedBaseContracts": [
								84
							],
							"name": "CircuitBreakerEmergencyController",
							"nameLocation": "374:33:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "450:96:0",
										"text": "@dev Indicates whether the auction system's emergency pause is enabled (true) or not (false)"
									},
									"id": 5,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "565:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 84,
									"src": "552:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 4,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "552:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "605:167:0",
										"text": "@dev Event for logging when the emergency pause feature has been toggled on\n @notice Event for logging when the emergency pause feature has been toggled on"
									},
									"eventSelector": "f9fc7e681c820cfd75b573974fc3fe590495ce5346b9877e696791ad9fae81a0",
									"id": 8,
									"name": "EmergencyPauseTurnedOn",
									"nameLocation": "784:22:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "806:2:0"
									},
									"src": "778:31:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "817:169:0",
										"text": "@dev Event for logging when the emergency pause feature has been toggled off\n @notice Event for logging when the emergency pause feature has been toggled off"
									},
									"eventSelector": "4f29b9e8cae9b5313eed7b2bc2e90099c915402e77e261d37dba82eb34a16510",
									"id": 11,
									"name": "EmergencyPauseTurnedOff",
									"nameLocation": "998:23:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1021:2:0"
									},
									"src": "992:32:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "1215:62:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1234:11:0",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 15,
																	"name": "isPaused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 43,
																	"src": "1235:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 16,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1235:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50617573656421",
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1247:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_59e9265fa8cb8d44d6cd177feb0423a0ec8af86f04b12649d5b020666b5ed9c7",
																"typeString": "literal_string \"Paused!\""
															},
															"value": "Paused!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_59e9265fa8cb8d44d6cd177feb0423a0ec8af86f04b12649d5b020666b5ed9c7",
																"typeString": "literal_string \"Paused!\""
															}
														],
														"id": 14,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1226:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1226:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "1226:31:0"
											},
											{
												"id": 21,
												"nodeType": "PlaceholderStatement",
												"src": "1268:1:0"
											}
										]
									},
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "1059:123:0",
										"text": "@dev This modifier absorbs the associated function's body when the system is not paused, otherwise it reverts execution"
									},
									"id": 23,
									"name": "onlyWhenNotPaused",
									"nameLocation": "1197:17:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:0:0"
									},
									"src": "1188:89:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "1434:65:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 27,
																"name": "isPaused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 43,
																"src": "1453:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 28,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1453:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742070617573656421",
															"id": 29,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1465:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bfcaf33e92b2cb449ab28612829d025061890767ffe8e78f8c12a58fcd7f4509",
																"typeString": "literal_string \"Not paused!\""
															},
															"value": "Not paused!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bfcaf33e92b2cb449ab28612829d025061890767ffe8e78f8c12a58fcd7f4509",
																"typeString": "literal_string \"Not paused!\""
															}
														],
														"id": 26,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1445:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1445:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 31,
												"nodeType": "ExpressionStatement",
												"src": "1445:34:0"
											},
											{
												"id": 32,
												"nodeType": "PlaceholderStatement",
												"src": "1490:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "1285:119:0",
										"text": "@dev This modifier absorbs the associated function's body when the system is paused, otherwise it reverts execution"
									},
									"id": 34,
									"name": "onlyWhenPaused",
									"nameLocation": "1419:14:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1434:0:0"
									},
									"src": "1410:89:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "1882:33:0",
										"statements": [
											{
												"expression": {
													"id": 40,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 5,
													"src": "1900:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 39,
												"id": 41,
												"nodeType": "Return",
												"src": "1893:14:0"
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "1539:290:0",
										"text": "@dev Retrieves whether the system is currently paused (true) or not paused (false)\n @notice Retrieves whether the system is currently paused (true) or not paused (false)\n @return Returns a boolean flag indicating whether the system is paused (true) or not paused (false)"
									},
									"functionSelector": "b187bd26",
									"id": 43,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPaused",
									"nameLocation": "1844:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1852:2:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "1876:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1876:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1875:6:0"
									},
									"scope": 84,
									"src": "1835:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "2228:74:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 49,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "2240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 50,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2250:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2240:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "2240:14:0"
											},
											{
												"eventCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "EmergencyPauseTurnedOn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "2270:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2270:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "EmitStatement",
												"src": "2265:29:0"
											}
										]
									},
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "1982:180:0",
										"text": "@dev Turns emergency pause on\n @notice Turns emergency pause on\n @custom:requirement-modifier This function will only execute if the emergency pause is disabled"
									},
									"id": 57,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 47,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 46,
												"name": "onlyWhenNotPaused",
												"nameLocations": [
													"2210:17:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 23,
												"src": "2210:17:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2210:17:0"
										}
									],
									"name": "_turnEmergencyPauseOn",
									"nameLocation": "2177:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2198:2:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2228:0:0"
									},
									"scope": 84,
									"src": "2168:134:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "2310:441:0",
										"text": "@dev Turns emergency pause on\n @notice Turns emergency pause on\n @return Returns true boolean if the emergency pause has been enabled successfully\n @custom:virtual This function should be overriden in the child contract, with access control, execution preconditions, and other checks implemented\n @custom:virtual The storage modification should be executed by the internal function '_turnEmergencyPauseOn'"
									},
									"functionSelector": "a60ac480",
									"id": 63,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "turnEmergencyPauseOn",
									"nameLocation": "2766:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2786:2:0"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "2815:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 60,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2815:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2814:6:0"
									},
									"scope": 84,
									"src": "2757:64:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "3074:75:0",
										"statements": [
											{
												"expression": {
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 69,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "3085:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 70,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3095:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3085:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "3085:15:0"
											},
											{
												"eventCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 73,
														"name": "EmergencyPauseTurnedOff",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "3116:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3116:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "EmitStatement",
												"src": "3111:30:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "2829:181:0",
										"text": "@dev Turns emergency pause off\n @notice Turns emergency pause off\n @custom:requirement-modifier This function will only execute if the emergency pause is enabled"
									},
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 67,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 66,
												"name": "onlyWhenPaused",
												"nameLocations": [
													"3059:14:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 34,
												"src": "3059:14:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3059:14:0"
										}
									],
									"name": "_turnEmergencyPauseOff",
									"nameLocation": "3025:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3047:2:0"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3074:0:0"
									},
									"scope": 84,
									"src": "3016:133:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "3157:445:0",
										"text": "@dev Turns emergency pause off\n @notice Turns emergency pause off\n @return Returns true boolean if the emergency pause has been disabled successfully\n @custom:virtual This function should be overriden in the child contract, with access control, execution preconditions, and other checks implemented\n @custom:virtual The storage modification should be executed by the internal function '_turnEmergencyPauseOff'"
									},
									"functionSelector": "c3500639",
									"id": 83,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "turnEmergencyPauseOff",
									"nameLocation": "3617:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3638:2:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "3667:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 80,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3667:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3666:6:0"
									},
									"scope": 84,
									"src": "3608:65:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 85,
							"src": "356:3320:0",
							"usedErrors": [],
							"usedEvents": [
								8,
								11
							]
						}
					],
					"src": "33:3643:0"
				},
				"id": 0
			}
		}
	}
}